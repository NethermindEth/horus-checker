(declare-fun ADDR!1 () Int)
(declare-fun ADDR!10 () Int)
(declare-fun ADDR!11 () Int)
(declare-fun ADDR!12 () Int)
(declare-fun ADDR!13 () Int)
(declare-fun ADDR!14 () Int)
(declare-fun ADDR!15 () Int)
(declare-fun ADDR!2 () Int)
(declare-fun ADDR!3 () Int)
(declare-fun ADDR!4 () Int)
(declare-fun ADDR!5 () Int)
(declare-fun ADDR!6 () Int)
(declare-fun ADDR!7 () Int)
(declare-fun ADDR!8 () Int)
(declare-fun ADDR!9 () Int)
(declare-fun MEM!1 () Int)
(declare-fun MEM!10 () Int)
(declare-fun MEM!11 () Int)
(declare-fun MEM!12 () Int)
(declare-fun MEM!13 () Int)
(declare-fun MEM!14 () Int)
(declare-fun MEM!15 () Int)
(declare-fun MEM!2 () Int)
(declare-fun MEM!3 () Int)
(declare-fun MEM!4 () Int)
(declare-fun MEM!5 () Int)
(declare-fun MEM!6 () Int)
(declare-fun MEM!7 () Int)
(declare-fun MEM!8 () Int)
(declare-fun MEM!9 () Int)
(declare-fun __main__.balance () Int)
(declare-fun ap!<root>@5 () Int)
(declare-fun fp!<51=read/root> () Int)
(declare-fun fp!<root> () Int)
(declare-fun pedersen!end () Int)
(declare-fun pedersen!start () Int)
(declare-fun prime () Int)
(declare-fun range-check!end () Int)
(declare-fun range-check!start () Int)
(declare-fun range-check-bound () Int)
(assert (and (<= 0 ADDR!1) (< ADDR!1 prime)))
(assert (and (<= 0 ADDR!10) (< ADDR!10 prime)))
(assert (and (<= 0 ADDR!11) (< ADDR!11 prime)))
(assert (and (<= 0 ADDR!12) (< ADDR!12 prime)))
(assert (and (<= 0 ADDR!13) (< ADDR!13 prime)))
(assert (and (<= 0 ADDR!14) (< ADDR!14 prime)))
(assert (and (<= 0 ADDR!15) (< ADDR!15 prime)))
(assert (and (<= 0 ADDR!2) (< ADDR!2 prime)))
(assert (and (<= 0 ADDR!3) (< ADDR!3 prime)))
(assert (and (<= 0 ADDR!4) (< ADDR!4 prime)))
(assert (and (<= 0 ADDR!5) (< ADDR!5 prime)))
(assert (and (<= 0 ADDR!6) (< ADDR!6 prime)))
(assert (and (<= 0 ADDR!7) (< ADDR!7 prime)))
(assert (and (<= 0 ADDR!8) (< ADDR!8 prime)))
(assert (and (<= 0 ADDR!9) (< ADDR!9 prime)))
(assert (and (<= 0 MEM!1) (< MEM!1 prime)))
(assert (and (<= 0 MEM!10) (< MEM!10 prime)))
(assert (and (<= 0 MEM!11) (< MEM!11 prime)))
(assert (and (<= 0 MEM!12) (< MEM!12 prime)))
(assert (and (<= 0 MEM!13) (< MEM!13 prime)))
(assert (and (<= 0 MEM!14) (< MEM!14 prime)))
(assert (and (<= 0 MEM!15) (< MEM!15 prime)))
(assert (and (<= 0 MEM!2) (< MEM!2 prime)))
(assert (and (<= 0 MEM!3) (< MEM!3 prime)))
(assert (and (<= 0 MEM!4) (< MEM!4 prime)))
(assert (and (<= 0 MEM!5) (< MEM!5 prime)))
(assert (and (<= 0 MEM!6) (< MEM!6 prime)))
(assert (and (<= 0 MEM!7) (< MEM!7 prime)))
(assert (and (<= 0 MEM!8) (< MEM!8 prime)))
(assert (and (<= 0 MEM!9) (< MEM!9 prime)))
(assert (and (<= 0 __main__.balance) (< __main__.balance prime)))
(assert (and (<= 0 ap!<root>@5) (< ap!<root>@5 prime)))
(assert (and (<= 0 fp!<51=read/root>) (< fp!<51=read/root> prime)))
(assert (and (<= 0 fp!<root>) (< fp!<root> prime)))
(assert (and (<= 0 pedersen!end) (< pedersen!end prime)))
(assert (and (<= 0 pedersen!start) (< pedersen!start prime)))
(assert (= prime 3618502788666131213697322783095070105623107215331596699973092056135872020481))
(assert (and (<= 0 range-check!end) (< range-check!end prime)))
(assert (and (<= 0 range-check!start) (< range-check!start prime)))
(assert (= range-check-bound 340282366920938463463374607431768211456))
(assert (=> (= ADDR!1 ADDR!2) (= MEM!1 MEM!2)))
(assert (=> (= ADDR!1 ADDR!3) (= MEM!1 MEM!3)))
(assert (=> (= ADDR!1 ADDR!4) (= MEM!1 MEM!4)))
(assert (=> (= ADDR!1 ADDR!5) (= MEM!1 MEM!5)))
(assert (=> (= ADDR!1 ADDR!6) (= MEM!1 MEM!6)))
(assert (=> (= ADDR!1 ADDR!7) (= MEM!1 MEM!7)))
(assert (=> (= ADDR!1 ADDR!8) (= MEM!1 MEM!8)))
(assert (=> (= ADDR!1 ADDR!9) (= MEM!1 MEM!9)))
(assert (=> (= ADDR!1 ADDR!10) (= MEM!1 MEM!10)))
(assert (=> (= ADDR!1 ADDR!11) (= MEM!1 MEM!11)))
(assert (=> (= ADDR!1 ADDR!12) (= MEM!1 MEM!12)))
(assert (=> (= ADDR!1 ADDR!13) (= MEM!1 MEM!13)))
(assert (=> (= ADDR!1 ADDR!14) (= MEM!1 MEM!14)))
(assert (=> (= ADDR!1 ADDR!15) (= MEM!1 MEM!15)))
(assert (=> (= ADDR!2 ADDR!3) (= MEM!2 MEM!3)))
(assert (=> (= ADDR!2 ADDR!4) (= MEM!2 MEM!4)))
(assert (=> (= ADDR!2 ADDR!5) (= MEM!2 MEM!5)))
(assert (=> (= ADDR!2 ADDR!6) (= MEM!2 MEM!6)))
(assert (=> (= ADDR!2 ADDR!7) (= MEM!2 MEM!7)))
(assert (=> (= ADDR!2 ADDR!8) (= MEM!2 MEM!8)))
(assert (=> (= ADDR!2 ADDR!9) (= MEM!2 MEM!9)))
(assert (=> (= ADDR!2 ADDR!10) (= MEM!2 MEM!10)))
(assert (=> (= ADDR!2 ADDR!11) (= MEM!2 MEM!11)))
(assert (=> (= ADDR!2 ADDR!12) (= MEM!2 MEM!12)))
(assert (=> (= ADDR!2 ADDR!13) (= MEM!2 MEM!13)))
(assert (=> (= ADDR!2 ADDR!14) (= MEM!2 MEM!14)))
(assert (=> (= ADDR!2 ADDR!15) (= MEM!2 MEM!15)))
(assert (=> (= ADDR!3 ADDR!4) (= MEM!3 MEM!4)))
(assert (=> (= ADDR!3 ADDR!5) (= MEM!3 MEM!5)))
(assert (=> (= ADDR!3 ADDR!6) (= MEM!3 MEM!6)))
(assert (=> (= ADDR!3 ADDR!7) (= MEM!3 MEM!7)))
(assert (=> (= ADDR!3 ADDR!8) (= MEM!3 MEM!8)))
(assert (=> (= ADDR!3 ADDR!9) (= MEM!3 MEM!9)))
(assert (=> (= ADDR!3 ADDR!10) (= MEM!3 MEM!10)))
(assert (=> (= ADDR!3 ADDR!11) (= MEM!3 MEM!11)))
(assert (=> (= ADDR!3 ADDR!12) (= MEM!3 MEM!12)))
(assert (=> (= ADDR!3 ADDR!13) (= MEM!3 MEM!13)))
(assert (=> (= ADDR!3 ADDR!14) (= MEM!3 MEM!14)))
(assert (=> (= ADDR!3 ADDR!15) (= MEM!3 MEM!15)))
(assert (=> (= ADDR!4 ADDR!5) (= MEM!4 MEM!5)))
(assert (=> (= ADDR!4 ADDR!6) (= MEM!4 MEM!6)))
(assert (=> (= ADDR!4 ADDR!7) (= MEM!4 MEM!7)))
(assert (=> (= ADDR!4 ADDR!8) (= MEM!4 MEM!8)))
(assert (=> (= ADDR!4 ADDR!9) (= MEM!4 MEM!9)))
(assert (=> (= ADDR!4 ADDR!10) (= MEM!4 MEM!10)))
(assert (=> (= ADDR!4 ADDR!11) (= MEM!4 MEM!11)))
(assert (=> (= ADDR!4 ADDR!12) (= MEM!4 MEM!12)))
(assert (=> (= ADDR!4 ADDR!13) (= MEM!4 MEM!13)))
(assert (=> (= ADDR!4 ADDR!14) (= MEM!4 MEM!14)))
(assert (=> (= ADDR!4 ADDR!15) (= MEM!4 MEM!15)))
(assert (=> (= ADDR!5 ADDR!6) (= MEM!5 MEM!6)))
(assert (=> (= ADDR!5 ADDR!7) (= MEM!5 MEM!7)))
(assert (=> (= ADDR!5 ADDR!8) (= MEM!5 MEM!8)))
(assert (=> (= ADDR!5 ADDR!9) (= MEM!5 MEM!9)))
(assert (=> (= ADDR!5 ADDR!10) (= MEM!5 MEM!10)))
(assert (=> (= ADDR!5 ADDR!11) (= MEM!5 MEM!11)))
(assert (=> (= ADDR!5 ADDR!12) (= MEM!5 MEM!12)))
(assert (=> (= ADDR!5 ADDR!13) (= MEM!5 MEM!13)))
(assert (=> (= ADDR!5 ADDR!14) (= MEM!5 MEM!14)))
(assert (=> (= ADDR!5 ADDR!15) (= MEM!5 MEM!15)))
(assert (=> (= ADDR!6 ADDR!7) (= MEM!6 MEM!7)))
(assert (=> (= ADDR!6 ADDR!8) (= MEM!6 MEM!8)))
(assert (=> (= ADDR!6 ADDR!9) (= MEM!6 MEM!9)))
(assert (=> (= ADDR!6 ADDR!10) (= MEM!6 MEM!10)))
(assert (=> (= ADDR!6 ADDR!11) (= MEM!6 MEM!11)))
(assert (=> (= ADDR!6 ADDR!12) (= MEM!6 MEM!12)))
(assert (=> (= ADDR!6 ADDR!13) (= MEM!6 MEM!13)))
(assert (=> (= ADDR!6 ADDR!14) (= MEM!6 MEM!14)))
(assert (=> (= ADDR!6 ADDR!15) (= MEM!6 MEM!15)))
(assert (=> (= ADDR!7 ADDR!8) (= MEM!7 MEM!8)))
(assert (=> (= ADDR!7 ADDR!9) (= MEM!7 MEM!9)))
(assert (=> (= ADDR!7 ADDR!10) (= MEM!7 MEM!10)))
(assert (=> (= ADDR!7 ADDR!11) (= MEM!7 MEM!11)))
(assert (=> (= ADDR!7 ADDR!12) (= MEM!7 MEM!12)))
(assert (=> (= ADDR!7 ADDR!13) (= MEM!7 MEM!13)))
(assert (=> (= ADDR!7 ADDR!14) (= MEM!7 MEM!14)))
(assert (=> (= ADDR!7 ADDR!15) (= MEM!7 MEM!15)))
(assert (=> (= ADDR!8 ADDR!9) (= MEM!8 MEM!9)))
(assert (=> (= ADDR!8 ADDR!10) (= MEM!8 MEM!10)))
(assert (=> (= ADDR!8 ADDR!11) (= MEM!8 MEM!11)))
(assert (=> (= ADDR!8 ADDR!12) (= MEM!8 MEM!12)))
(assert (=> (= ADDR!8 ADDR!13) (= MEM!8 MEM!13)))
(assert (=> (= ADDR!8 ADDR!14) (= MEM!8 MEM!14)))
(assert (=> (= ADDR!8 ADDR!15) (= MEM!8 MEM!15)))
(assert (=> (= ADDR!9 ADDR!10) (= MEM!9 MEM!10)))
(assert (=> (= ADDR!9 ADDR!11) (= MEM!9 MEM!11)))
(assert (=> (= ADDR!9 ADDR!12) (= MEM!9 MEM!12)))
(assert (=> (= ADDR!9 ADDR!13) (= MEM!9 MEM!13)))
(assert (=> (= ADDR!9 ADDR!14) (= MEM!9 MEM!14)))
(assert (=> (= ADDR!9 ADDR!15) (= MEM!9 MEM!15)))
(assert (=> (= ADDR!10 ADDR!11) (= MEM!10 MEM!11)))
(assert (=> (= ADDR!10 ADDR!12) (= MEM!10 MEM!12)))
(assert (=> (= ADDR!10 ADDR!13) (= MEM!10 MEM!13)))
(assert (=> (= ADDR!10 ADDR!14) (= MEM!10 MEM!14)))
(assert (=> (= ADDR!10 ADDR!15) (= MEM!10 MEM!15)))
(assert (=> (= ADDR!11 ADDR!12) (= MEM!11 MEM!12)))
(assert (=> (= ADDR!11 ADDR!13) (= MEM!11 MEM!13)))
(assert (=> (= ADDR!11 ADDR!14) (= MEM!11 MEM!14)))
(assert (=> (= ADDR!11 ADDR!15) (= MEM!11 MEM!15)))
(assert (=> (= ADDR!12 ADDR!13) (= MEM!12 MEM!13)))
(assert (=> (= ADDR!12 ADDR!14) (= MEM!12 MEM!14)))
(assert (=> (= ADDR!12 ADDR!15) (= MEM!12 MEM!15)))
(assert (=> (= ADDR!13 ADDR!14) (= MEM!13 MEM!14)))
(assert (=> (= ADDR!13 ADDR!15) (= MEM!13 MEM!15)))
(assert (=> (= ADDR!14 ADDR!15) (= MEM!14 MEM!15)))
(assert (= ADDR!1 (mod (+ fp!<root> (- 3)) prime)))
(assert (= ADDR!2 (mod (+ fp!<root> (- 1)) prime)))
(assert (= ADDR!3 (mod (+ ap!<root>@5 1) prime)))
(assert (= ADDR!4 (mod (+ fp!<root> (- 6)) prime)))
(assert (= ADDR!5 (mod (+ ap!<root>@5 2) prime)))
(assert (= ADDR!6 (mod (+ fp!<root> (- 5)) prime)))
(assert (= ADDR!7 (mod (+ ap!<root>@5 3) prime)))
(assert (= ADDR!8 (mod (+ fp!<root> (- 4)) prime)))
(assert (= ADDR!9 (mod (+ ap!<root>@5 4) prime)))
(assert (= ADDR!10 (mod (+ ap!<root>@5 5) prime)))
(assert (= ADDR!11 (mod (+ ap!<root>@5 22) prime)))
(assert (= ADDR!12 (mod (+ fp!<51=read/root> (- 4)) prime)))
(assert (= ADDR!13 (mod (+ ap!<root>@5 21) prime)))
(assert (= ADDR!14 (mod (+ ap!<root>@5 23) prime)))
(assert (= ADDR!15 (mod (+ fp!<51=read/root> (- 3)) prime)))
(assert (<= fp!<root> ap!<root>@5))
(assert (= ap!<root>@5 fp!<root>))
(assert (= MEM!4 MEM!3))
(assert (= MEM!6 MEM!5))
(assert (= MEM!8 MEM!7))
(assert (and (= fp!<51=read/root> (mod (+ ap!<root>@5 6) prime)) (= MEM!9 fp!<root>) (= MEM!10 53)))
(assert (< (mod (+ ap!<root>@5 4) prime) (mod (+ ap!<root>@5 24) prime)))
(assert (and (<= pedersen!start MEM!6) (<= MEM!11 pedersen!end)))
(assert true)
(assert true)
(assert true)
(assert (and (<= MEM!12 MEM!13) (<= pedersen!start MEM!13)))
(assert (and (<= range-check!start MEM!8) (<= MEM!14 range-check!end)))
(assert (=> (and (<= range-check!start (mod (+ fp!<root> (- 6)) prime)) (< (mod (+ fp!<root> (- 6)) prime) range-check!end)) (<= 0 MEM!4 (mod (+ range-check-bound (- 1)) prime))))
(assert (=> (and (<= range-check!start (mod (+ fp!<root> (- 5)) prime)) (< (mod (+ fp!<root> (- 5)) prime) range-check!end)) (<= 0 MEM!6 (mod (+ range-check-bound (- 1)) prime))))
(assert (=> (and (<= range-check!start (mod (+ fp!<root> (- 4)) prime)) (< (mod (+ fp!<root> (- 4)) prime) range-check!end)) (<= 0 MEM!8 (mod (+ range-check-bound (- 1)) prime))))
(assert (and (<= MEM!15 MEM!11) (<= range-check!start MEM!11)))
(assert (not (and (<= MEM!6 MEM!11) (<= pedersen!start MEM!11) (<= pedersen!start MEM!12) (<= MEM!13 pedersen!end) (<= MEM!8 MEM!14) (<= range-check!start MEM!14) (<= range-check!start MEM!15) (<= MEM!11 range-check!end) (= (mod (+ __main__.balance MEM!1) prime) __main__.balance))))
(check-sat)