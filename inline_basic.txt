CFG
    { cfg_vertices =
        [ Label 7
        , Label 5
        , Label 3
        , Label 2
        , Label 0
        ]
    , cfg_arcs = fromList
        [
            ( Label 0
            ,
                [
                    ( Label 2
                    ,
                        [
                            ( Label 0
                            ,
                                { instr imm: 1 }
                            )
                        ]
                    , ACNone
                    , Nothing
                    )
                ]
            )
        ,
            ( Label 2
            ,
                [
                    ( Label 7
                    ,
                        [
                            ( Label 2
                            ,
                                { instr imm: 0 }
                            )
                        ]
                    , ACNone
                    , Just ArcRet
                    )
                ]
            )
        ,
            ( Label 3
            ,
                [
                    ( Label 5
                    ,
                        [
                            ( Label 3
                            ,
                                { instr imm: 41 }
                            )
                        ]
                    , ACNone
                    , Nothing
                    )
                ]
            )
        ,
            ( Label 5
            ,
                [
                    ( Label 0
                    ,
                        [
                            ( Label 5
                            ,
                                { instr imm: - 5 }
                            )
                        ]
                    , ACNone
                    , Just
                        ( ArcCall Label 5 Label 0 )
                    )
                ]
            )
        ]
    , cfg_assertions = fromList
        [
            ( Label 7
            ,
                [
                    ( Fun "=" :*: Felt 42 ) :*:
                    ( Fun "memory" :*:
                        (
                            ( Fun "+" :*: Fun "ap" ) :*: Felt
                            ( - 1 )
                        )
                    )
                ]
            )
        ]
    }
Module
    { m_spec = MSRich
        ( FuncSpec
            { fs_pre = True
            , fs_post =
                ( Fun "=" :*: Felt 42 ) :*:
                ( Fun "memory" :*:
                    (
                        ( Fun "+" :*: Fun "ap" ) :*: Felt
                        ( - 1 )
                    )
                )
            , fs_storage = fromList []
            }
        )
    , m_prog =
        [
            ( Label 3
            ,
                { instr imm: 41 }
            )
        ,
            ( Label 5
            ,
                { instr imm: - 5 }
            )
        ,
            ( Label 0
            ,
                { instr imm: 1 }
            )
        ,
            ( Label 2
            ,
                { instr imm: 0 }
            )
        ]
    , m_jnzOracle = fromList []
    , m_calledF = Label 3
    , m_lastPc = Label 7
    }
"# Memory
MEM!1=[(+ ap!<root>@1 3)]
MEM!2=[ap!<root>@1]
MEM!3=[(+ ap!<root>@1 1)]
MEM!4=[(+ ap!<root>@1 2)]
MEM!5=[ap!<5=succ/root>@0]
MEM!6=[(+ fp!<5=succ/root> (- 3))]
MEM!7=[(+ fp!<5=succ/root> (- 2))]
# Assert
(<= fp!<root> ap!<root>@1)
(= ap!<root>@1 fp!<root>)
(= 41 MEM!2)
(and (= fp!<5=succ/root> (+ ap!<root>@1 3)) (= MEM!3 fp!<root>) (= MEM!4 7))
(= (+ MEM!6 1) MEM!5)
(= (+ ap!<5=succ/root>@0 1) (+ ap!<root>@1 4))
# Expect
(= 42 MEM!1)
true"
main
Unsat
